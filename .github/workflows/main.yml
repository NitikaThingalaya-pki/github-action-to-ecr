name: Deploy to ECR

on:
  workflow_dispatch:  # This enables manual triggering of the workflow

permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest
    environment: aws

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: eu-central-1

    - name: Configure AWS credentials from AWS account
      uses: aws-actions/configure-aws-credentials@v1
      with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: us-east-1
          role-session-name: GitHub-OIDC-TERRAFORM

    

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Download Wiz CLI
      run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli

    - name: Authenticate to Wiz
      run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
      env:
        WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
        WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

    #- name: Run wiz-cli directory scan
    #  run: ./wizcli dir scan --path . --policy "Revvity Data Security policy,Revvity Secret Management Policy,Revvity Vulnerability Management policy"

    #- name: Run wiz-cli IAC scan
    #  run: ./wizcli iac scan --path . --policy "Revvity Infrastructure As Code Policy"
      

    - name: Build, Tag, Scan image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: test_ml_demo
        IMAGE_TAG: test_ml_image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        ./wizcli docker scan --image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
       

    - name: Push image to Amazon ECR if scan successfull
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: test_ml_demo
        IMAGE_TAG: test_ml_image
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
